
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 05 22:09:12 CEST 2016
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Iterator;
import java.util.Stack;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 05 22:09:12 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\004\004\000\002\004\002\000\002\005\003\000\002" +
    "\005\004\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\040\004" +
    "\000\002\040\004\000\002\041\006\000\002\041\007\000" +
    "\002\041\006\000\002\041\006\000\002\041\006\000\002" +
    "\042\012\000\002\042\005\000\002\042\012\000\002\042" +
    "\012\000\002\042\010\000\002\042\012\000\002\042\012" +
    "\000\002\042\005\000\002\042\005\000\002\042\006\000" +
    "\002\006\004\000\002\006\004\000\002\007\006\000\002" +
    "\007\007\000\002\007\006\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\012\005\000\002\012\007\000" +
    "\002\012\005\000\002\012\007\000\002\012\005\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\014\010\000\002\014\010\000\002\014\010" +
    "\000\002\015\012\000\002\015\012\000\002\015\012\000" +
    "\002\015\012\000\002\015\012\000\002\015\012\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\002\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\007\000\002\017\007\000\002\017\007\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\051\010\000\002\051\010\000\002\051\010\000" +
    "\002\051\010\000\002\051\010\000\002\051\010\000\002" +
    "\052\005\000\002\052\006\000\002\047\006\000\002\047" +
    "\006\000\002\047\006\000\002\050\012\000\002\050\012" +
    "\000\002\050\012\000\002\050\012\000\002\050\012\000" +
    "\002\050\012\000\002\050\012\000\002\045\007\000\002" +
    "\045\007\000\002\045\007\000\002\046\004\000\002\046" +
    "\002\000\002\023\003\000\002\023\006\000\002\023\005" +
    "\000\002\023\006\000\002\022\005\000\002\024\005\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\043\003\000\002\043\004\000\002\043" +
    "\006\000\002\043\005\000\002\043\004\000\002\043\005" +
    "\000\002\043\006\000\002\031\005\000\002\031\002\000" +
    "\002\032\003\000\002\032\005\000\002\033\004\000\002" +
    "\034\006\000\002\034\007\000\002\035\005\000\002\035" +
    "\002\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0182\000\006\003\006\004\004\001\002\000\006\003" +
    "\u017a\061\u017b\001\002\000\004\002\u0179\001\002\000\004" +
    "\061\007\001\002\000\004\034\010\001\002\000\020\003" +
    "\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\020\ufff7" +
    "\001\002\000\020\003\023\005\016\007\026\010\030\011" +
    "\014\012\017\020\024\001\002\000\004\035\013\001\002" +
    "\000\004\002\uffff\001\002\000\006\003\u016b\061\u016c\001" +
    "\002\000\020\003\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\020\ufff8\001\002\000\022\003\u0167\005\uff70\024" +
    "\202\027\217\031\220\033\204\034\uff70\061\270\001\002" +
    "\000\006\003\u0131\061\u0132\001\002\000\020\003\ufff2\005" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\020\ufff2\001\002" +
    "\000\020\003\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\020\ufff0\001\002\000\020\003\ufff1\005\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\020\ufff1\001\002\000\022\003" +
    "\215\005\uff70\024\202\027\217\031\220\033\204\034\uff70" +
    "\061\206\001\002\000\006\003\106\061\110\001\002\000" +
    "\020\003\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\020\ufff4\001\002\000\006\003\066\061\070\001\002\000" +
    "\020\003\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\020\ufff3\001\002\000\006\003\032\061\034\001\002\000" +
    "\006\003\062\037\063\001\002\000\010\034\060\037\057" +
    "\055\041\001\002\000\004\034\044\001\002\000\010\003" +
    "\035\037\uffce\055\036\001\002\000\006\003\040\061\034" +
    "\001\002\000\006\003\040\061\034\001\002\000\006\003" +
    "\uffcd\037\uffcd\001\002\000\004\055\041\001\002\000\006" +
    "\003\040\061\034\001\002\000\006\003\uffcc\037\uffcc\001" +
    "\002\000\006\003\uffcb\037\uffcb\001\002\000\024\003\040" +
    "\005\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\020\uffd6\034" +
    "\uffd6\061\034\001\002\000\006\003\046\037\047\001\002" +
    "\000\012\042\050\043\052\044\053\061\054\001\002\000" +
    "\012\042\050\043\052\044\053\061\054\001\002\000\010" +
    "\006\uffb7\034\uffb7\041\uffb7\001\002\000\010\006\uff6c\034" +
    "\uff6c\041\uff6c\001\002\000\010\006\uffb6\034\uffb6\041\uffb6" +
    "\001\002\000\010\006\uffb5\034\uffb5\041\uffb5\001\002\000" +
    "\010\006\uff6b\034\uff6b\041\uff6b\001\002\000\006\006\uffd2" +
    "\034\uffd2\001\002\000\006\006\uffd0\034\uffd0\001\002\000" +
    "\012\042\050\043\052\044\053\061\054\001\002\000\022" +
    "\003\uffd4\005\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\020" +
    "\uffd4\034\uffd4\001\002\000\006\006\uffcf\034\uffcf\001\002" +
    "\000\012\042\050\043\052\044\053\061\054\001\002\000" +
    "\012\042\050\043\052\044\053\061\054\001\002\000\006" +
    "\006\uffd3\034\uffd3\001\002\000\006\006\uffd1\034\uffd1\001" +
    "\002\000\004\036\103\001\002\000\024\003\uffde\005\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\020\uffde\034\uffde\061" +
    "\077\001\002\000\004\036\071\001\002\000\010\056\074" +
    "\057\075\060\072\001\002\000\062\003\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\021\uffd7\025\uffd7\030\uffd7\032\uffd7" +
    "\034\uffd7\036\uffd7\037\uffd7\041\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\001\002\000\004\034\076\001\002\000" +
    "\062\003\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\021\uffd9" +
    "\025\uffd9\030\uffd9\032\uffd9\034\uffd9\036\uffd9\037\uffd9\041" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\063\uffd9\064\uffd9\065\uffd9\001\002\000" +
    "\062\003\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\021\uffd8" +
    "\025\uffd8\030\uffd8\032\uffd8\034\uffd8\036\uffd8\037\uffd8\041" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\063\uffd8\064\uffd8\065\uffd8\001\002\000" +
    "\024\003\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\020\uffdc\034\uffdc\061\uffdc\001\002\000\004\036\100\001" +
    "\002\000\010\056\074\057\075\060\072\001\002\000\004" +
    "\034\102\001\002\000\024\003\uffdb\005\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\020\uffdb\034\uffdb\061\uffdb\001\002" +
    "\000\010\056\074\057\075\060\072\001\002\000\004\034" +
    "\105\001\002\000\024\003\uffda\005\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\020\uffda\034\uffda\061\uffda\001\002\000" +
    "\004\036\175\001\002\000\022\003\uffef\005\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\020\uffef\034\uffef\001\002\000" +
    "\006\003\111\036\112\001\002\000\010\003\172\022\116" +
    "\023\113\001\002\000\010\003\114\022\116\023\113\001" +
    "\002\000\006\003\166\061\034\001\002\000\012\003\152" +
    "\034\155\061\034\062\153\001\002\000\004\034\150\001" +
    "\002\000\006\003\120\062\117\001\002\000\012\003\131" +
    "\056\074\057\075\060\072\001\002\000\012\021\122\056" +
    "\074\057\075\060\072\001\002\000\004\064\124\001\002" +
    "\000\012\042\050\043\052\044\053\061\054\001\002\000" +
    "\004\034\uffdf\001\002\000\010\056\074\057\075\060\072" +
    "\001\002\000\004\063\126\001\002\000\004\021\127\001" +
    "\002\000\012\042\050\043\052\044\053\061\054\001\002" +
    "\000\004\034\uffe6\001\002\000\004\063\145\001\002\000" +
    "\004\064\133\001\002\000\010\056\074\057\075\060\072" +
    "\001\002\000\006\003\135\063\136\001\002\000\004\021" +
    "\143\001\002\000\006\003\137\021\140\001\002\000\012" +
    "\042\050\043\052\044\053\061\054\001\002\000\012\042" +
    "\050\043\052\044\053\061\054\001\002\000\004\034\uffe8" +
    "\001\002\000\004\034\uffe2\001\002\000\012\042\050\043" +
    "\052\044\053\061\054\001\002\000\004\034\uffe5\001\002" +
    "\000\004\021\146\001\002\000\012\042\050\043\052\044" +
    "\053\061\054\001\002\000\004\034\uffe4\001\002\000\024" +
    "\003\106\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\020" +
    "\uffed\034\uffed\061\110\001\002\000\022\003\uffec\005\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\020\uffec\034\uffec\001" +
    "\002\000\006\037\057\055\041\001\002\000\010\056\074" +
    "\057\075\060\072\001\002\000\006\006\156\034\157\001" +
    "\002\000\022\003\uffe9\005\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\020\uffe9\034\uffe9\001\002\000\004\034\uffe1\001" +
    "\002\000\006\003\040\061\034\001\002\000\004\064\161" +
    "\001\002\000\010\056\074\057\075\060\072\001\002\000" +
    "\004\063\163\001\002\000\004\021\164\001\002\000\012" +
    "\042\050\043\052\044\053\061\054\001\002\000\004\034" +
    "\uffe3\001\002\000\010\006\171\037\057\055\041\001\002" +
    "\000\006\006\170\034\157\001\002\000\004\034\uffe7\001" +
    "\002\000\004\034\uffe0\001\002\000\010\003\152\061\034" +
    "\062\153\001\002\000\004\034\174\001\002\000\022\003" +
    "\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\020\uffeb" +
    "\034\uffeb\001\002\000\010\003\172\022\116\023\113\001" +
    "\002\000\004\034\177\001\002\000\022\003\uffea\005\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\020\uffea\034\uffea\001" +
    "\002\000\040\003\uffb2\005\uffb2\006\uffb2\017\uffb2\024\uffb2" +
    "\026\uffb2\027\uffb2\031\uffb2\033\uffb2\034\uffb2\040\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\001\002\000\022\003\uffee" +
    "\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee\020\uffee\034" +
    "\uffee\001\002\000\020\003\u0124\017\233\040\232\056\074" +
    "\057\075\060\072\061\237\001\002\000\024\003\uffdd\005" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\020\uffdd\034\uffdd" +
    "\061\077\001\002\000\020\003\u0111\017\233\040\232\056" +
    "\074\057\075\060\072\061\237\001\002\000\024\003\ufff6" +
    "\005\ufff6\006\ufff6\024\ufff6\027\ufff6\031\ufff6\033\ufff6\034" +
    "\ufff6\061\ufff6\001\002\000\024\003\u010a\034\uff77\035\271" +
    "\036\u010b\037\uffce\040\272\045\uff96\055\036\062\273\001" +
    "\002\000\006\005\u0101\034\u0102\001\002\000\004\045\377" +
    "\001\002\000\040\003\uffae\005\uffae\006\uffae\017\uffae\024" +
    "\uffae\026\uffae\027\uffae\031\uffae\033\uffae\034\uffae\040\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\001\002\000\024\003" +
    "\267\005\uff70\006\375\024\202\027\217\031\220\033\204" +
    "\034\uff70\061\270\001\002\000\004\034\374\001\002\000" +
    "\040\003\uffb1\005\uffb1\006\uffb1\017\uffb1\024\uffb1\026\uffb1" +
    "\027\uffb1\031\uffb1\033\uffb1\034\uffb1\040\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\001\002\000\024\017\233\036\373" +
    "\037\057\040\232\055\041\056\074\057\075\060\072\061" +
    "\237\001\002\000\040\003\uffb0\005\uffb0\006\uffb0\017\uffb0" +
    "\024\uffb0\026\uffb0\027\uffb0\031\uffb0\033\uffb0\034\uffb0\040" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\001\002\000\020" +
    "\003\363\017\233\040\232\056\074\057\075\060\072\061" +
    "\237\001\002\000\006\003\226\061\227\001\002\000\040" +
    "\003\uffaf\005\uffaf\006\uffaf\017\uffaf\024\uffaf\026\uffaf\027" +
    "\uffaf\031\uffaf\033\uffaf\034\uffaf\040\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\001\002\000\004\034\225\001\002\000" +
    "\004\034\224\001\002\000\024\003\040\005\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\020\uffd5\034\uffd5\061\034\001" +
    "\002\000\040\003\uffb4\005\uffb4\006\uffb4\017\uffb4\024\uffb4" +
    "\026\uffb4\027\uffb4\031\uffb4\033\uffb4\034\uffb4\040\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002\000\004\045\355" +
    "\001\002\000\006\003\230\045\231\001\002\000\016\017" +
    "\233\040\232\056\074\057\075\060\072\061\237\001\002" +
    "\000\020\003\236\017\233\040\232\056\074\057\075\060" +
    "\072\061\237\001\002\000\016\017\233\040\232\056\074" +
    "\057\075\060\072\061\237\001\002\000\016\017\233\040" +
    "\232\056\074\057\075\060\072\061\237\001\002\000\060" +
    "\003\uff90\013\uff90\014\uff90\015\uff90\016\uff90\021\uff90\025" +
    "\uff90\030\uff90\032\uff90\034\uff90\036\uff90\037\uff90\041\uff90" +
    "\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\063\uff90\065\uff90\001\002\000\060\003\uff7f" +
    "\013\uff7f\014\uff7f\015\uff7f\016\uff7f\021\uff7f\025\uff7f\030" +
    "\uff7f\032\uff7f\034\uff7f\036\uff7f\037\uff7f\041\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055" +
    "\uff7f\063\uff7f\065\uff7f\001\002\000\004\032\341\001\002" +
    "\000\066\003\uff77\013\uff77\014\uff77\015\uff77\016\uff77\021" +
    "\uff77\025\uff77\030\uff77\032\uff77\034\uff77\035\331\036\uff77" +
    "\037\uff77\040\272\041\uff77\046\uff77\047\uff77\050\uff77\051" +
    "\uff77\052\uff77\053\uff77\054\uff77\055\uff77\062\332\063\uff77" +
    "\065\uff77\001\002\000\040\003\253\013\251\014\257\015" +
    "\261\016\246\032\243\036\252\046\250\047\245\050\262" +
    "\051\254\052\260\053\247\054\255\065\256\001\002\000" +
    "\016\017\uff8f\040\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\001\002\000\016\017\uff8e\040\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\001\002\000\020\003\321\017\233\040\232" +
    "\056\074\057\075\060\072\061\237\001\002\000\016\017" +
    "\233\040\232\056\074\057\075\060\072\061\237\001\002" +
    "\000\016\017\uff8a\040\uff8a\056\uff8a\057\uff8a\060\uff8a\061" +
    "\uff8a\001\002\000\016\017\uff81\040\uff81\056\uff81\057\uff81" +
    "\060\uff81\061\uff81\001\002\000\016\017\uff85\040\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\001\002\000\016\017\uff8c" +
    "\040\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\001\002\000" +
    "\016\017\uff83\040\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\001\002\000\016\017\uff88\040\uff88\056\uff88\057\uff88\060" +
    "\uff88\061\uff88\001\002\000\016\017\233\040\232\056\074" +
    "\057\075\060\072\061\237\001\002\000\016\017\uff89\040" +
    "\uff89\056\uff89\057\uff89\060\uff89\061\uff89\001\002\000\016" +
    "\017\uff84\040\uff84\056\uff84\057\uff84\060\uff84\061\uff84\001" +
    "\002\000\016\017\uff86\040\uff86\056\uff86\057\uff86\060\uff86" +
    "\061\uff86\001\002\000\016\017\uff82\040\uff82\056\uff82\057" +
    "\uff82\060\uff82\061\uff82\001\002\000\016\017\uff87\040\uff87" +
    "\056\uff87\057\uff87\060\uff87\061\uff87\001\002\000\016\017" +
    "\uff80\040\uff80\056\uff80\057\uff80\060\uff80\061\uff80\001\002" +
    "\000\016\017\uff8b\040\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\001\002\000\016\017\uff8d\040\uff8d\056\uff8d\057\uff8d" +
    "\060\uff8d\061\uff8d\001\002\000\036\013\251\014\257\015" +
    "\261\016\246\030\265\036\252\046\250\047\245\050\262" +
    "\051\254\052\260\053\247\054\255\065\256\001\002\000" +
    "\022\003\267\005\uff70\024\202\027\217\031\220\033\204" +
    "\034\uff70\061\270\001\002\000\040\003\uff9f\005\uff9f\006" +
    "\uff9f\017\uff9f\024\uff9f\026\uff9f\027\uff9f\031\uff9f\033\uff9f" +
    "\034\uff9f\040\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\001" +
    "\002\000\016\017\233\040\232\056\074\057\075\060\072" +
    "\061\237\001\002\000\014\034\uff77\035\271\040\272\045" +
    "\uff96\062\273\001\002\000\004\061\306\001\002\000\016" +
    "\017\233\040\232\056\074\057\075\060\072\061\237\001" +
    "\002\000\020\003\275\017\233\040\232\056\074\057\075" +
    "\060\072\061\237\001\002\000\004\034\uff74\001\002\000" +
    "\004\063\300\001\002\000\036\013\251\014\257\015\261" +
    "\016\246\036\252\046\250\047\245\050\262\051\254\052" +
    "\260\053\247\054\255\063\277\065\256\001\002\000\004" +
    "\045\uff95\001\002\000\004\045\uff93\001\002\000\040\013" +
    "\251\014\257\015\261\016\246\036\252\041\uff76\046\250" +
    "\047\245\050\262\051\254\052\260\053\247\054\255\055" +
    "\304\065\256\001\002\000\004\041\303\001\002\000\060" +
    "\003\uff78\013\uff78\014\uff78\015\uff78\016\uff78\021\uff78\025" +
    "\uff78\030\uff78\032\uff78\034\uff78\036\uff78\037\uff78\041\uff78" +
    "\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054" +
    "\uff78\055\uff78\063\uff78\065\uff78\001\002\000\016\017\233" +
    "\040\232\056\074\057\075\060\072\061\237\001\002\000" +
    "\004\041\uff75\001\002\000\004\045\uff94\001\002\000\036" +
    "\013\251\014\257\015\261\016\246\021\310\036\252\046" +
    "\250\047\245\050\262\051\254\052\260\053\247\054\255" +
    "\065\256\001\002\000\016\017\233\040\232\056\074\057" +
    "\075\060\072\061\237\001\002\000\004\006\316\001\002" +
    "\000\036\013\251\014\257\015\261\016\246\036\252\037" +
    "\313\046\250\047\245\050\262\051\254\052\260\053\247" +
    "\054\255\065\256\001\002\000\022\003\267\005\uff70\024" +
    "\202\027\217\031\220\033\204\034\uff70\061\270\001\002" +
    "\000\022\003\uffa7\006\uffa7\017\233\040\232\056\074\057" +
    "\075\060\072\061\237\001\002\000\006\003\uffa6\006\uffa6" +
    "\001\002\000\004\034\317\001\002\000\040\003\uffac\005" +
    "\uffac\006\uffac\017\uffac\024\uffac\026\uffac\027\uffac\031\uffac" +
    "\033\uffac\034\uffac\040\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\001\002\000\060\003\uff91\013\251\014\257\015\261" +
    "\016\246\021\uff91\025\uff91\030\uff91\032\uff91\034\uff91\036" +
    "\252\037\uff91\041\uff91\046\250\047\245\050\262\051\254" +
    "\052\260\053\247\054\255\055\uff91\063\uff91\065\256\001" +
    "\002\000\004\030\327\001\002\000\040\003\324\013\251" +
    "\014\257\015\261\016\246\030\323\036\252\046\250\047" +
    "\245\050\262\051\254\052\260\053\247\054\255\065\256" +
    "\001\002\000\022\003\267\005\uff70\024\202\027\217\031" +
    "\220\033\204\034\uff70\061\270\001\002\000\022\003\267" +
    "\005\uff70\024\202\027\217\031\220\033\204\034\uff70\061" +
    "\270\001\002\000\040\003\uff9e\005\uff9e\006\uff9e\017\uff9e" +
    "\024\uff9e\026\uff9e\027\uff9e\031\uff9e\033\uff9e\034\uff9e\040" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\001\002\000\040" +
    "\003\uffa2\005\uffa2\006\uffa2\017\uffa2\024\uffa2\026\uffa2\027" +
    "\uffa2\031\uffa2\033\uffa2\034\uffa2\040\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\001\002\000\022\003\267\005\uff70\024" +
    "\202\027\217\031\220\033\204\034\uff70\061\270\001\002" +
    "\000\040\003\uff9d\005\uff9d\006\uff9d\017\uff9d\024\uff9d\026" +
    "\uff9d\027\uff9d\031\uff9d\033\uff9d\034\uff9d\040\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\001\002\000\004\061\340\001" +
    "\002\000\020\003\334\017\233\040\232\056\074\057\075" +
    "\060\072\061\237\001\002\000\060\003\uff7b\013\uff7b\014" +
    "\uff7b\015\uff7b\016\uff7b\021\uff7b\025\uff7b\030\uff7b\032\uff7b" +
    "\034\uff7b\036\uff7b\037\uff7b\041\uff7b\046\uff7b\047\uff7b\050" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\063\uff7b" +
    "\065\uff7b\001\002\000\004\063\337\001\002\000\036\013" +
    "\251\014\257\015\261\016\246\036\252\046\250\047\245" +
    "\050\262\051\254\052\260\053\247\054\255\063\336\065" +
    "\256\001\002\000\060\003\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\016\uff7d\021\uff7d\025\uff7d\030\uff7d\032\uff7d\034\uff7d\036" +
    "\uff7d\037\uff7d\041\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d" +
    "\052\uff7d\053\uff7d\054\uff7d\055\uff7d\063\uff7d\065\uff7d\001" +
    "\002\000\060\003\uff79\013\uff79\014\uff79\015\uff79\016\uff79" +
    "\021\uff79\025\uff79\030\uff79\032\uff79\034\uff79\036\uff79\037" +
    "\uff79\041\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79" +
    "\053\uff79\054\uff79\055\uff79\063\uff79\065\uff79\001\002\000" +
    "\060\003\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\021\uff7a" +
    "\025\uff7a\030\uff7a\032\uff7a\034\uff7a\036\uff7a\037\uff7a\041" +
    "\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a" +
    "\054\uff7a\055\uff7a\063\uff7a\065\uff7a\001\002\000\016\017" +
    "\233\040\232\056\074\057\075\060\072\061\237\001\002" +
    "\000\036\013\251\014\257\015\261\016\246\030\343\036" +
    "\252\046\250\047\245\050\262\051\254\052\260\053\247" +
    "\054\255\065\256\001\002\000\022\003\267\005\uff70\024" +
    "\202\027\217\031\220\033\204\034\uff70\061\270\001\002" +
    "\000\040\003\uff9c\005\uff9c\006\uff9c\017\uff9c\024\uff9c\026" +
    "\uff9c\027\uff9c\031\uff9c\033\uff9c\034\uff9c\040\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\001\002\000\060\003\uff7e\013" +
    "\uff7e\014\uff7e\015\uff7e\016\uff7e\021\uff7e\025\uff7e\030\uff7e" +
    "\032\uff7e\034\uff7e\036\uff7e\037\uff7e\041\uff7e\046\uff7e\047" +
    "\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e" +
    "\063\uff7e\065\uff7e\001\002\000\036\013\251\014\257\015" +
    "\261\016\246\036\252\041\347\046\250\047\245\050\262" +
    "\051\254\052\260\053\247\054\255\065\256\001\002\000" +
    "\060\003\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\021\uff7c" +
    "\025\uff7c\030\uff7c\032\uff7c\034\uff7c\036\uff7c\037\uff7c\041" +
    "\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c" +
    "\054\uff7c\055\uff7c\063\uff7c\065\uff7c\001\002\000\036\013" +
    "\251\014\257\015\261\016\246\032\351\036\252\046\250" +
    "\047\245\050\262\051\254\052\260\053\247\054\255\065" +
    "\256\001\002\000\016\017\233\040\232\056\074\057\075" +
    "\060\072\061\237\001\002\000\036\013\251\014\257\015" +
    "\261\016\246\030\353\036\252\046\250\047\245\050\262" +
    "\051\254\052\260\053\247\054\255\065\256\001\002\000" +
    "\022\003\267\005\uff70\024\202\027\217\031\220\033\204" +
    "\034\uff70\061\270\001\002\000\040\003\uffa0\005\uffa0\006" +
    "\uffa0\017\uffa0\024\uffa0\026\uffa0\027\uffa0\031\uffa0\033\uffa0" +
    "\034\uffa0\040\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\001" +
    "\002\000\016\017\233\040\232\056\074\057\075\060\072" +
    "\061\237\001\002\000\036\013\251\014\257\015\261\016" +
    "\246\032\357\036\252\046\250\047\245\050\262\051\254" +
    "\052\260\053\247\054\255\065\256\001\002\000\016\017" +
    "\233\040\232\056\074\057\075\060\072\061\237\001\002" +
    "\000\036\013\251\014\257\015\261\016\246\030\361\036" +
    "\252\046\250\047\245\050\262\051\254\052\260\053\247" +
    "\054\255\065\256\001\002\000\022\003\267\005\uff70\024" +
    "\202\027\217\031\220\033\204\034\uff70\061\270\001\002" +
    "\000\040\003\uffa1\005\uffa1\006\uffa1\017\uffa1\024\uffa1\026" +
    "\uffa1\027\uffa1\031\uffa1\033\uffa1\034\uffa1\040\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\001\002\000\004\030\371\001" +
    "\002\000\040\003\366\013\251\014\257\015\261\016\246" +
    "\030\365\036\252\046\250\047\245\050\262\051\254\052" +
    "\260\053\247\054\255\065\256\001\002\000\022\003\267" +
    "\005\uff70\024\202\027\217\031\220\033\204\034\uff70\061" +
    "\270\001\002\000\022\003\267\005\uff70\024\202\027\217" +
    "\031\220\033\204\034\uff70\061\270\001\002\000\040\003" +
    "\uffa3\005\uffa3\006\uffa3\017\uffa3\024\uffa3\026\uffa3\027\uffa3" +
    "\031\uffa3\033\uffa3\034\uffa3\040\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\061\uffa3\001\002\000\040\003\uffa5\005\uffa5\006\uffa5" +
    "\017\uffa5\024\uffa5\026\uffa5\027\uffa5\031\uffa5\033\uffa5\034" +
    "\uffa5\040\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002" +
    "\000\022\003\267\005\uff70\024\202\027\217\031\220\033" +
    "\204\034\uff70\061\270\001\002\000\040\003\uffa4\005\uffa4" +
    "\006\uffa4\017\uffa4\024\uffa4\026\uffa4\027\uffa4\031\uffa4\033" +
    "\uffa4\034\uffa4\040\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\001\002\000\016\003\172\022\116\023\113\056\074\057" +
    "\075\060\072\001\002\000\040\003\uffb3\005\uffb3\006\uffb3" +
    "\017\uffb3\024\uffb3\026\uffb3\027\uffb3\031\uffb3\033\uffb3\034" +
    "\uffb3\040\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002" +
    "\000\006\034\ufffb\035\ufffb\001\002\000\024\003\ufff5\005" +
    "\ufff5\006\ufff5\024\ufff5\027\ufff5\031\ufff5\033\ufff5\034\ufff5" +
    "\061\ufff5\001\002\000\016\017\233\040\232\056\074\057" +
    "\075\060\072\061\237\001\002\000\036\013\251\014\257" +
    "\015\261\016\246\034\uff92\036\252\046\250\047\245\050" +
    "\262\051\254\052\260\053\247\054\255\065\256\001\002" +
    "\000\022\003\267\005\uff70\024\202\027\217\031\220\033" +
    "\204\034\uff70\061\270\001\002\000\012\003\u0103\007\026" +
    "\010\030\020\024\001\002\000\006\003\u0108\061\u0109\001" +
    "\002\000\006\005\uff6d\034\uff6d\001\002\000\006\005\uff6e" +
    "\034\uff6e\001\002\000\006\005\uff71\034\uff71\001\002\000" +
    "\006\005\uff6f\034\uff6f\001\002\000\010\036\373\037\057" +
    "\055\041\001\002\000\012\003\u010a\036\u010b\037\uffce\055" +
    "\036\001\002\000\012\003\u010c\022\116\023\113\061\034" +
    "\001\002\000\016\003\114\022\116\023\113\056\074\057" +
    "\075\060\072\001\002\000\012\003\152\055\041\061\034" +
    "\062\153\001\002\000\024\003\u010f\005\uff70\006\u010e\024" +
    "\202\027\217\031\220\033\204\034\uff70\061\270\001\002" +
    "\000\040\003\uff73\005\uff73\006\uff73\017\uff73\024\uff73\026" +
    "\uff73\027\uff73\031\uff73\033\uff73\034\uff73\040\uff73\056\uff73" +
    "\057\uff73\060\uff73\061\uff73\001\002\000\020\017\233\034" +
    "\u0110\040\232\056\074\057\075\060\072\061\237\001\002" +
    "\000\040\003\uff72\005\uff72\006\uff72\017\uff72\024\uff72\026" +
    "\uff72\027\uff72\031\uff72\033\uff72\034\uff72\040\uff72\056\uff72" +
    "\057\uff72\060\uff72\061\uff72\001\002\000\004\021\u0120\001" +
    "\002\000\040\003\u0114\013\251\014\257\015\261\016\246" +
    "\021\u0113\036\252\046\250\047\245\050\262\051\254\052" +
    "\260\053\247\054\255\065\256\001\002\000\020\003\u0119" +
    "\017\233\040\232\056\074\057\075\060\072\061\237\001" +
    "\002\000\016\017\233\040\232\056\074\057\075\060\072" +
    "\061\237\001\002\000\004\006\u0116\001\002\000\004\034" +
    "\u0117\001\002\000\040\003\uffab\005\uffab\006\uffab\017\uffab" +
    "\024\uffab\026\uffab\027\uffab\031\uffab\033\uffab\034\uffab\040" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\001\002\000\006" +
    "\003\u011d\006\u011c\001\002\000\004\006\u011a\001\002\000" +
    "\004\034\u011b\001\002\000\040\003\uffa9\005\uffa9\006\uffa9" +
    "\017\uffa9\024\uffa9\026\uffa9\027\uffa9\031\uffa9\033\uffa9\034" +
    "\uffa9\040\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\001\002" +
    "\000\004\034\u011f\001\002\000\004\034\u011e\001\002\000" +
    "\040\003\uffa8\005\uffa8\006\uffa8\017\uffa8\024\uffa8\026\uffa8" +
    "\027\uffa8\031\uffa8\033\uffa8\034\uffa8\040\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\001\002\000\040\003\uffad\005\uffad" +
    "\006\uffad\017\uffad\024\uffad\026\uffad\027\uffad\031\uffad\033" +
    "\uffad\034\uffad\040\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\001\002\000\016\017\233\040\232\056\074\057\075\060" +
    "\072\061\237\001\002\000\004\006\u0122\001\002\000\004" +
    "\034\u0123\001\002\000\040\003\uffaa\005\uffaa\006\uffaa\017" +
    "\uffaa\024\uffaa\026\uffaa\027\uffaa\031\uffaa\033\uffaa\034\uffaa" +
    "\040\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\001\002\000" +
    "\004\025\u012e\001\002\000\040\003\u0126\013\251\014\257" +
    "\015\261\016\246\025\u0127\036\252\046\250\047\245\050" +
    "\262\051\254\052\260\053\247\054\255\065\256\001\002" +
    "\000\022\003\267\005\uff70\024\202\027\217\031\220\033" +
    "\204\034\uff70\061\270\001\002\000\022\003\267\005\uff70" +
    "\024\202\027\217\031\220\033\204\034\uff70\061\270\001" +
    "\002\000\040\003\uff97\005\uff97\006\uff97\017\uff97\024\uff97" +
    "\026\u012a\027\uff97\031\uff97\033\uff97\034\uff97\040\uff97\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\001\002\000\040\003\uff9b" +
    "\005\uff9b\006\uff9b\017\uff9b\024\uff9b\026\uff9b\027\uff9b\031" +
    "\uff9b\033\uff9b\034\uff9b\040\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\001\002\000\022\003\267\005\uff70\024\202\027" +
    "\217\031\220\033\204\034\uff70\061\270\001\002\000\040" +
    "\003\uff98\005\uff98\006\uff98\017\uff98\024\uff98\026\uff98\027" +
    "\uff98\031\uff98\033\uff98\034\uff98\040\uff98\056\uff98\057\uff98" +
    "\060\uff98\061\uff98\001\002\000\040\003\uff97\005\uff97\006" +
    "\uff97\017\uff97\024\uff97\026\u012a\027\uff97\031\uff97\033\uff97" +
    "\034\uff97\040\uff97\056\uff97\057\uff97\060\uff97\061\uff97\001" +
    "\002\000\040\003\uff99\005\uff99\006\uff99\017\uff99\024\uff99" +
    "\026\uff99\027\uff99\031\uff99\033\uff99\034\uff99\040\uff99\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\001\002\000\022\003\267" +
    "\005\uff70\024\202\027\217\031\220\033\204\034\uff70\061" +
    "\270\001\002\000\040\003\uff97\005\uff97\006\uff97\017\uff97" +
    "\024\uff97\026\u012a\027\uff97\031\uff97\033\uff97\034\uff97\040" +
    "\uff97\056\uff97\057\uff97\060\uff97\061\uff97\001\002\000\040" +
    "\003\uff9a\005\uff9a\006\uff9a\017\uff9a\024\uff9a\026\uff9a\027" +
    "\uff9a\031\uff9a\033\uff9a\034\uff9a\040\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\001\002\000\010\003\u015f\037\uffbe\040" +
    "\u0133\001\002\000\010\003\u0134\037\uffbe\040\u0133\001\002" +
    "\000\006\003\u015c\061\034\001\002\000\010\003\u0148\037" +
    "\u0149\061\034\001\002\000\006\003\u0136\037\u0137\001\002" +
    "\000\012\042\050\043\052\044\053\061\054\001\002\000" +
    "\014\003\u0138\042\050\043\052\044\053\061\054\001\002" +
    "\000\004\034\u013f\001\002\000\004\034\u013a\001\002\000" +
    "\020\003\u013b\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\020\ufff7\001\002\000\004\034\u013e\001\002\000\004\034" +
    "\u013d\001\002\000\020\003\uffc7\005\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\020\uffc7\001\002\000\020\003\uffc4\005" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\020\uffc4\001\002" +
    "\000\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\020\ufff7\001\002\000\004\034\u0141\001\002\000\020" +
    "\003\uffc2\005\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\020" +
    "\uffc2\001\002\000\004\034\u0143\001\002\000\020\003\ufff7" +
    "\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\020\ufff7\001" +
    "\002\000\004\034\u0145\001\002\000\020\003\uffc3\005\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\020\uffc3\001\002\000" +
    "\004\041\u015a\001\002\000\006\003\u0152\037\u0153\001\002" +
    "\000\006\037\u014e\055\041\001\002\000\012\042\050\043" +
    "\052\044\053\061\054\001\002\000\004\034\u014b\001\002" +
    "\000\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\020\ufff7\001\002\000\004\034\u014d\001\002\000\020" +
    "\003\uffc5\005\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\020" +
    "\uffc5\001\002\000\012\042\050\043\052\044\053\061\054" +
    "\001\002\000\006\034\u0150\041\uffbc\001\002\000\006\003" +
    "\u0148\061\034\001\002\000\004\041\uffb8\001\002\000\012" +
    "\042\050\043\052\044\053\061\054\001\002\000\012\042" +
    "\050\043\052\044\053\061\054\001\002\000\006\034\u0155" +
    "\041\uffbd\001\002\000\006\003\u0148\061\034\001\002\000" +
    "\004\041\uffba\001\002\000\006\034\u0158\041\uffbb\001\002" +
    "\000\006\003\u0148\061\034\001\002\000\004\041\uffb9\001" +
    "\002\000\010\003\uffc0\034\uffc0\037\uffc0\001\002\000\004" +
    "\041\u015e\001\002\000\010\037\u014e\041\u015d\055\041\001" +
    "\002\000\010\003\uffbf\034\uffbf\037\uffbf\001\002\000\010" +
    "\003\uffc1\034\uffc1\037\uffc1\001\002\000\006\003\u0148\061" +
    "\034\001\002\000\004\037\u0161\001\002\000\012\042\050" +
    "\043\052\044\053\061\054\001\002\000\004\034\u0163\001" +
    "\002\000\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\020\ufff7\001\002\000\004\034\u0165\001\002\000" +
    "\020\003\uffc6\005\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\020\uffc6\001\002\000\024\003\u016a\005\uff70\006\u0169\024" +
    "\202\027\217\031\220\033\204\034\uff70\061\270\001\002" +
    "\000\020\006\u0168\017\233\040\232\056\074\057\075\060" +
    "\072\061\237\001\002\000\006\034\ufff9\035\ufff9\001\002" +
    "\000\006\034\ufffc\035\ufffc\001\002\000\022\017\233\034" +
    "\ufffa\035\ufffa\040\232\056\074\057\075\060\072\061\237" +
    "\001\002\000\010\003\u015f\034\uffbe\040\u0133\001\002\000" +
    "\010\003\u016d\034\uffbe\040\u0133\001\002\000\010\003\u0148" +
    "\034\u0172\061\034\001\002\000\004\034\u016f\001\002\000" +
    "\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\020\ufff7\001\002\000\004\034\u0171\001\002\000\020\003" +
    "\uffca\005\uffca\007\uffca\010\uffca\011\uffca\012\uffca\020\uffca" +
    "\001\002\000\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\020\ufff7\001\002\000\004\034\u0174\001\002" +
    "\000\020\003\uffc8\005\uffc8\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\020\uffc8\001\002\000\004\034\u0176\001\002\000\020" +
    "\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\020" +
    "\ufff7\001\002\000\004\034\u0178\001\002\000\020\003\uffc9" +
    "\005\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\020\uffc9\001" +
    "\002\000\004\002\000\001\002\000\004\034\u0182\001\002" +
    "\000\006\003\u017c\034\u017d\001\002\000\020\003\ufff7\005" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\020\ufff7\001\002" +
    "\000\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\020\ufff7\001\002\000\004\035\u017f\001\002\000\004" +
    "\002\001\001\002\000\004\035\u0181\001\002\000\004\002" +
    "\ufffd\001\002\000\020\003\ufff7\005\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\020\ufff7\001\002\000\004\035\u0184\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0182\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\010\001\001\000\016\006\024\011\026\014" +
    "\017\015\021\037\014\040\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\u0165\021\204\022\221\023\207\033\212\034\177" +
    "\035\206\045\215\047\220\050\210\051\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\211\007\202\012\222\013\030\021" +
    "\204\022\221\023\207\033\212\034\177\035\206\041\200" +
    "\045\215\047\220\050\210\051\213\001\001\000\004\041" +
    "\106\001\001\000\002\001\001\000\004\007\066\001\001" +
    "\000\002\001\001\000\006\012\032\013\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\042\001\001\000\004\013\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\044\001\001\000\002\001\001\000\006\020\050\044\055" +
    "\001\001\000\006\020\050\044\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\050\044\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\050\044\064\001\001\000\006\020" +
    "\050\044\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\172\001\001\000\004\042" +
    "\114\001\001\000\006\012\166\013\030\001\001\000\006" +
    "\012\153\013\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\131\001\001\000\004\010\120\001\001" +
    "\000\002\001\001\000\006\020\050\044\122\001\001\000" +
    "\002\001\001\000\004\010\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\050\044\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\050\044\141\001\001\000\006" +
    "\020\050\044\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\050\044\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\050\044\146\001\001\000" +
    "\002\001\001\000\004\041\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\044" +
    "\001\001\000\002\001\001\000\004\010\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\050\044\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\153" +
    "\013\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\234\024" +
    "\u0124\043\233\001\001\000\002\001\001\000\010\010\234" +
    "\024\u0111\043\233\001\001\000\002\001\001\000\004\031" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\021\375\022\221\023\207\033\212\034" +
    "\177\035\206\045\215\047\220\050\210\051\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\234\024" +
    "\306\043\233\001\001\000\002\001\001\000\010\010\234" +
    "\024\363\043\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\234\024\347\043\233\001\001\000\010" +
    "\010\234\024\237\043\233\001\001\000\010\010\234\024" +
    "\345\043\233\001\001\000\006\010\234\043\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\332\001\001\000\012\025\243\026\240\027\262" +
    "\030\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\234\024\321\043\233\001\001\000\010\010\234" +
    "\024\317\043\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\234\024\263\043\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\243\026\240" +
    "\027\262\030\241\001\001\000\026\021\265\022\221\023" +
    "\207\033\212\034\177\035\206\045\215\047\220\050\210" +
    "\051\213\001\001\000\002\001\001\000\010\010\234\024" +
    "\306\043\233\001\001\000\004\031\273\001\001\000\002" +
    "\001\001\000\012\010\234\024\300\032\301\043\233\001" +
    "\001\000\010\010\234\024\275\043\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\243\026\240\027" +
    "\262\030\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\243\026\240\027\262\030\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\234\024\300" +
    "\032\304\043\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\243\026\240\027\262\030\241\001\001" +
    "\000\012\010\234\024\311\043\233\052\310\001\001\000" +
    "\002\001\001\000\012\025\243\026\240\027\262\030\241" +
    "\001\001\000\026\021\313\022\221\023\207\033\212\034" +
    "\177\035\206\045\215\047\220\050\210\051\213\001\001" +
    "\000\012\010\234\024\311\043\233\052\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\243\026\240\027\262\030\241\001\001\000\002\001" +
    "\001\000\012\025\243\026\240\027\262\030\241\001\001" +
    "\000\026\021\325\022\221\023\207\033\212\034\177\035" +
    "\206\045\215\047\220\050\210\051\213\001\001\000\026" +
    "\021\324\022\221\023\207\033\212\034\177\035\206\045" +
    "\215\047\220\050\210\051\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\021\327\022\221\023\207\033" +
    "\212\034\177\035\206\045\215\047\220\050\210\051\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\234\024\334\043\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\243\026\240\027\262\030\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\234\024\341\043\233\001\001\000\012\025" +
    "\243\026\240\027\262\030\241\001\001\000\026\021\343" +
    "\022\221\023\207\033\212\034\177\035\206\045\215\047" +
    "\220\050\210\051\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\243\026\240\027\262\030\241\001" +
    "\001\000\002\001\001\000\012\025\243\026\240\027\262" +
    "\030\241\001\001\000\010\010\234\024\351\043\233\001" +
    "\001\000\012\025\243\026\240\027\262\030\241\001\001" +
    "\000\026\021\353\022\221\023\207\033\212\034\177\035" +
    "\206\045\215\047\220\050\210\051\213\001\001\000\002" +
    "\001\001\000\010\010\234\024\355\043\233\001\001\000" +
    "\012\025\243\026\240\027\262\030\241\001\001\000\010" +
    "\010\234\024\357\043\233\001\001\000\012\025\243\026" +
    "\240\027\262\030\241\001\001\000\026\021\361\022\221" +
    "\023\207\033\212\034\177\035\206\045\215\047\220\050" +
    "\210\051\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\243\026\240\027\262\030\241\001\001\000" +
    "\026\021\367\022\221\023\207\033\212\034\177\035\206" +
    "\045\215\047\220\050\210\051\213\001\001\000\026\021" +
    "\366\022\221\023\207\033\212\034\177\035\206\045\215" +
    "\047\220\050\210\051\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\371\022\221\023\207\033\212" +
    "\034\177\035\206\045\215\047\220\050\210\051\213\001" +
    "\001\000\002\001\001\000\006\010\103\042\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\234\024\377\043\233\001\001\000\012\025\243" +
    "\026\240\027\262\030\241\001\001\000\030\005\u010c\021" +
    "\204\022\221\023\207\033\212\034\177\035\206\045\215" +
    "\047\220\050\210\051\213\001\001\000\012\006\u0106\011" +
    "\u0103\036\u0105\040\u0104\001\001\000\012\007\202\012\222" +
    "\013\030\041\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\042\042\172\001\001\000" +
    "\006\010\072\042\114\001\001\000\006\012\153\013\030" +
    "\001\001\000\026\021\375\022\221\023\207\033\212\034" +
    "\177\035\206\045\215\047\220\050\210\051\213\001\001" +
    "\000\002\001\001\000\010\010\234\024\306\043\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\243" +
    "\026\240\027\262\030\241\001\001\000\012\010\234\024" +
    "\311\043\233\052\u0117\001\001\000\012\010\234\024\311" +
    "\043\233\052\u0114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\234\024\311\043\233\052\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\243\026\240\027\262\030\241\001\001\000" +
    "\026\021\u012b\022\221\023\207\033\212\034\177\035\206" +
    "\045\215\047\220\050\210\051\213\001\001\000\026\021" +
    "\u0127\022\221\023\207\033\212\034\177\035\206\045\215" +
    "\047\220\050\210\051\213\001\001\000\004\046\u0128\001" +
    "\001\000\002\001\001\000\026\021\u012a\022\221\023\207" +
    "\033\212\034\177\035\206\045\215\047\220\050\210\051" +
    "\213\001\001\000\002\001\001\000\004\046\u012c\001\001" +
    "\000\002\001\001\000\026\021\u012e\022\221\023\207\033" +
    "\212\034\177\035\206\045\215\047\220\050\210\051\213" +
    "\001\001\000\004\046\u012f\001\001\000\002\001\001\000" +
    "\004\016\u015f\001\001\000\004\016\u0134\001\001\000\006" +
    "\013\u0146\017\u015a\001\001\000\006\013\u0146\017\u0145\001" +
    "\001\000\002\001\001\000\006\020\050\044\u0141\001\001" +
    "\000\006\020\050\044\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\u013b\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\u013f\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u0143\004" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\050\044\u0149\001\001\000\002\001\001\000\006\003\u014b" +
    "\004\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\050\044\u014e\001\001\000\002\001\001\000\006" +
    "\013\u0146\017\u0150\001\001\000\002\001\001\000\006\020" +
    "\050\044\u0156\001\001\000\006\020\050\044\u0153\001\001" +
    "\000\002\001\001\000\006\013\u0146\017\u0155\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u0146\017\u0158" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u0146\017\u0145\001\001\000\002\001\001\000" +
    "\006\020\050\044\u0161\001\001\000\002\001\001\000\006" +
    "\003\u0163\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\021\375\022\221\023\207\033\212\034\177" +
    "\035\206\045\215\047\220\050\210\051\213\001\001\000" +
    "\010\010\234\024\306\043\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\234\024\306\043\233\001" +
    "\001\000\004\016\u0174\001\001\000\004\016\u016d\001\001" +
    "\000\006\013\u0146\017\u0145\001\001\000\002\001\001\000" +
    "\006\003\u016f\004\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u0172\004\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\u0176" +
    "\004\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\u017f\004\010\001\001\000\006\003\u017d\004\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\u0182\004\010\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    APIExportacion apiExp = new APIExportacion("archivo.html");
    /* Reporte de error encontrado. */
    public void syntax_error(Symbol s,String mensaje){
        report_error("",s);
    }
    public void syntax_error(Symbol s){
        report_error("",s);
    }
    Stack<Object> pilaErrores = new Stack<Object>();
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            pilaErrores.push(info);
        }
     }
    ventanaNueva nuevaInterfaz;
    Integer cont = 1;
    public parser(java_cup.runtime.Scanner s, ventanaNueva i){super(s);nuevaInterfaz=i;}

    public void lecturaError(String mensaje,Object e){
        java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) pilaErrores.pop();
        nuevaInterfaz.imprimirError("Error sintáctico encontrado en Línea "+s.left+" Columna: "+s.right);
        nuevaInterfaz.imprimirError("Error "+cont+".- "+mensaje+"\n");
        cont+=1;
     }
    public void report_fatal_error(String message, Object info) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        nuevaInterfaz.imprimirError("Ha tenido lugar un error sintáctico sin recuperación posible: "+s.value
        + " \nEn la línea "+s.left+" y columna "+s.right);
        nuevaInterfaz.alerta("Ha tenido lugar un error sintáctico sin recuperación posible");
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ALLTYPES ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Simbolo s = new Simbolo();
               s.tipoDato = (String) id;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ALLTYPES ::= TBAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DCL_BLQ ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DCL_BLQ ::= DEFTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DCL_BLQ ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DCLLIST_BLQ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DCLLIST_BLQ ::= DCLLIST_BLQ puntoComa DCL_BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXEBLQ ::= DCLLIST_BLQ begin SENTLIST error puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba cierre end del begin (en linea: "+bleft+")",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXEBLQ ::= DCLLIST_BLQ begin SENTLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PROC_CALL ::= Identificador SUBPPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPLIST ::= EXP coma EXPLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPLIST ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SUBPPARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SUBPPARAMLIST ::= parentesisAbierto EXPLIST parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPPARAMLIST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FACTOR ::= Identificador corcheteAb error corcheteCe 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Error en la expresion de acceso en el identificador "+i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FACTOR ::= Identificador punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FACTOR ::= Identificador SUBPPARAMLIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FACTOR ::= parentesisAbierto EXP parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FACTOR ::= Identificador corcheteAb EXP corcheteCe 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FACTOR ::= not FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FACTOR ::= SIMPVALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPLOG ::= and 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "&&";
               s.tipoOperador= Simbolo.T_OP_LOG;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPLOG ::= or 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "||";
               s.tipoOperador= Simbolo.T_OP_LOG;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPARIT ::= mod 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "%";
               s.tipoOperador= Simbolo.T_OP_ARIT;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPARIT ::= div 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "/";
               s.tipoOperador= Simbolo.T_OP_ARIT;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPARIT ::= asterisco 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "*";
               s.tipoOperador= Simbolo.T_OP_ARIT;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPARIT ::= menos 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "-";
               s.tipoOperador= Simbolo.T_OP_ARIT;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPARIT ::= suma 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "+";
               s.tipoOperador= Simbolo.T_OP_ARIT;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPCOMP ::= distinto 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "!=";
               s.tipoOperador= Simbolo.T_OP_COMP;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPCOMP ::= igual 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "==";
               s.tipoOperador= Simbolo.T_OP_COMP;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPCOMP ::= mayorIgual 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = ">=";
               s.tipoOperador= Simbolo.T_OP_COMP;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPCOMP ::= menorIgual 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "<=";
               s.tipoOperador= Simbolo.T_OP_COMP;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPCOMP ::= mayor 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = ">";
               s.tipoOperador= Simbolo.T_OP_COMP;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPCOMP ::= menor 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.op = "<";
               s.tipoOperador= Simbolo.T_OP_COMP;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP ::= OPARIT 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP ::= OPLOG 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP ::= OPCOMP 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ASIG ::= ID dosPuntosIgual EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ID ::= Identificador corcheteAb error corcheteCe 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Error en la expresion de acceso en el identificador "+i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ID ::= Identificador punto Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ID ::= Identificador corcheteAb EXP corcheteCe 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELSECOND ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELSECOND ::= ident_else SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COND ::= ident_if EXP error SENT ELSECOND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba la palabra reservada 'then' en el if",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COND ::= ident_if error then SENT ELSECOND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Error en la expresion de condicion del if",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COND ::= ident_if EXP then SENT ELSECOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FLOOP ::= ident_for Identificador dosPuntosIgual error to EXP ident_do SENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.lecturaError("Error en la expresion de inicializacion del bucle for",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FLOOP ::= ident_for Identificador dosPuntosIgual EXP to error ident_do SENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Error en la expresion de limite del bucle for",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FLOOP ::= ident_for Identificador dosPuntosIgual EXP to EXP error SENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba palabra reservada 'do' en bucle for",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FLOOP ::= ident_for Identificador dosPuntosIgual EXP error EXP ident_do SENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Se esperaba palabra reservada 'to' en bucle for",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FLOOP ::= ident_for Identificador error EXP to EXP ident_do SENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		parser.lecturaError("Se esperaba ':=' despues del identificador "+i+" del bucle for",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FLOOP ::= ident_for error dosPuntosIgual EXP to EXP ident_do SENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		parser.lecturaError("Error en el identificador del for",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FLOOP ::= ident_for Identificador dosPuntosIgual EXP to EXP ident_do SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WLOOP ::= ident_while EXP error SENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba palabra reservada 'do'",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WLOOP ::= ident_while error ident_do SENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Error de expresión en el while",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WLOOP ::= ident_while EXP ident_do SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASELIST ::= EXP dosPuntos SENT CASELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASELIST ::= EXP dosPuntos SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASE ::= ident_case EXP of CASELIST error puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba 'end' en la finalización de case",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASE ::= ident_case EXP of error end puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Error en la lista de casos de case",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASE ::= ident_case error of CASELIST end puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.lecturaError("Error en la expresión principal del case",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASE ::= ident_case EXP error CASELIST end puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Se esperaba palabra reservada 'of'",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASE ::= error EXP of CASELIST end puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		parser.lecturaError("Se esperaba palabra reservada 'case'",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASE ::= ident_case EXP of CASELIST end puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENT ::= FLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENT ::= WLOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENT ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENT ::= CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENT ::= EXEBLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENT ::= PROC_CALL puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENT ::= ASIG puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TBAS ::= CHARACTER 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.tipoDato = Simbolo.T_DATO_CHARACTER;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TBAS ::= REAL 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.tipoDato = Simbolo.T_DATO_REAL;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TBAS ::= INTEGER 
            {
              Object RESULT =null;
		Simbolo s = new Simbolo();
               s.tipoDato = Simbolo.T_DATO_INTEGER;
               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FORMAL_PARAM ::= error dosPuntos ALLTYPES puntoComa FORMAL_PARAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.lecturaError("La lista de variables esta mal definida en los parametros",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FORMAL_PARAM ::= VARLIST error ALLTYPES puntoComa FORMAL_PARAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Se esperaba ':' despues de la lista de variables",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FORMAL_PARAM ::= VARLIST dosPuntos ALLTYPES puntoComa FORMAL_PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FORMAL_PARAM ::= VARLIST error ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba ':' despues de la lista de variables",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FORMAL_PARAM ::= error dosPuntos ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("La lista de variables esta mal definida en los parametros",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FORMAL_PARAM ::= VARLIST dosPuntos ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FORMAL_PARAMLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FORMAL_PARAMLIST ::= parentesisAbierto error parentesisCerrado 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Los parametros se encuentran mal definidos",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FORMAL_PARAMLIST ::= error FORMAL_PARAM parentesisCerrado 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba '(' antes de la lista de parametros ",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FORMAL_PARAMLIST ::= parentesisAbierto FORMAL_PARAM parentesisCerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DEFFUN ::= function Identificador FORMAL_PARAMLIST dosPuntos error puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Se esperaba tipo de dato devuelto por la funcion "+i+" despues de ':'",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEFFUN ::= function Identificador FORMAL_PARAMLIST error ALLTYPES puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.lecturaError("Se esperaba ':' antes del tipo de dato devuelto por la funcion "+i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DEFFUN ::= function Identificador FORMAL_PARAMLIST dosPuntos ALLTYPES puntoComa error puntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba cuerpo de la funcion "+i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEFFUN ::= function Identificador error dosPuntos ALLTYPES puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		parser.lecturaError("Se esperaba la definicion de parametros de la funcion "+i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEFFUN ::= function error FORMAL_PARAMLIST dosPuntos ALLTYPES puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		parser.lecturaError("Se esperaba identificador de la funcion",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEFFUN ::= function Identificador FORMAL_PARAMLIST dosPuntos ALLTYPES puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		parser.apiExp.addCabecera("function "+((String)id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DEFPROC ::= procedure Identificador error puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Se esperaba la definicion de parametros del procedimiento "+i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEFPROC ::= procedure error FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.lecturaError("Se esperaba identificador de procedimiento",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEFPROC ::= procedure Identificador FORMAL_PARAMLIST puntoComa BLQ puntoComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.apiExp.addCabecera("procedure "+((String)id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARLIST ::= Identificador error VARLIST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba ',' despues del identificador de la variable "+i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARLIST ::= error coma VARLIST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba identificador de la variable",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARLIST ::= Identificador coma VARLIST 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((Simbolo) v).arrayVariables.add((String)id);
                                     RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARLIST ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Simbolo s = new Simbolo();
                               s.arrayVariables = new ArrayList<String>();
                               s.arrayVariables.add((String)id);
                               RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DEFVARLIST ::= error dosPuntos ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba lista de variables",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST error ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba ':' entre la lista de variables y su tipo",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DEFVARLIST ::= VARLIST error ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba ':' entre la lista de variables y su tipo",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEFVARLIST ::= DEFVARLIST puntoComa VARLIST dosPuntos ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DEFVARLIST ::= VARLIST dosPuntos ALLTYPES 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		for(String sr:((Simbolo)v).arrayVariables){
                                                System.out.println(sr+" es del tipo "+((Simbolo)t).tipoDato);
                                                                    }
                                              ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEFVAR ::= var error puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaban definiciones de variables",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFVAR ::= error DEFVARLIST puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba palabra reservada 'var'",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEFVAR ::= var DEFVARLIST puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIMPVALUE ::= string_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIMPVALUE ::= numeric_real_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIMPVALUE ::= numeric_integer_const 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CTELIST ::= error igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Se esperaba identificador en la definicion de constante",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CTELIST ::= CTELIST Identificador igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CTELIST ::= Identificador igual SIMPVALUE puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEFCTE ::= error CTELIST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba palabra reservada 'const' en la definicion de constantes",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFCTE ::= ident_const CTELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UDTYPE ::= array error of ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba intervalo en la definición del array",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UDTYPE ::= record error end 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba definiciones de variables en la definición de registro",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // UDTYPE ::= error DEFVARLIST end 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba palabra reservada 'record' en la definición del registro",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // UDTYPE ::= array corcheteAb SIMPVALUE puntosRango SIMPVALUE corcheteCe error ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba 'of' en la definición del array",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // UDTYPE ::= error corcheteAb SIMPVALUE puntosRango SIMPVALUE corcheteCe of ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		parser.lecturaError("Se esperaba palabra reservada 'array'",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // UDTYPE ::= array corcheteAb error corcheteCe of ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("El intervalo del array está mal definido",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // UDTYPE ::= array corcheteAb SIMPVALUE puntosRango SIMPVALUE error of ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba ']' despes del intervalo",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // UDTYPE ::= array error SIMPVALUE puntosRango SIMPVALUE corcheteCe of ALLTYPES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		parser.lecturaError("Se esperaba '[' antes del intervalo",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // UDTYPE ::= record DEFVARLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // UDTYPE ::= array corcheteAb SIMPVALUE puntosRango SIMPVALUE corcheteCe of ALLTYPES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPELIST ::= Identificador igual error puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Falta la definición de tipo",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPELIST ::= error igual UDTYPE puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Falta identificador en definición de tipo",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPELIST ::= Identificador error UDTYPE puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Falta igual en definición de tipo",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPELIST ::= Identificador igual UDTYPE puntoComa TYPELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPELIST ::= Identificador igual UDTYPE puntoComa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFTYPE ::= error TYPELIST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Se esperaba palabra reservada type",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEFTYPE ::= type TYPELIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DCL ::= DEFTYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DCL ::= DEFFUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DCL ::= DEFPROC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCL ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFCTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCLLIST ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DCLLIST ::= DCLLIST DCL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLQ ::= DCLLIST begin error end 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.lecturaError("Error en la zona de sentencias del programa",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLQ ::= DCLLIST begin SENTLIST error 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.lecturaError("Se esperaba cierre end del begin (en linea: "+bleft+")",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLQ ::= DCLLIST error SENTLIST end 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba palabra reservada begin",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLQ ::= DCLLIST begin SENTLIST end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PRG ::= program Identificador error BLQ punto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.lecturaError("Se esperaba punto y coma después del identificador del programa",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PRG ::= program error puntoComa BLQ punto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.lecturaError("Se esperaba identificador del programa",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PRG ::= error Identificador puntoComa BLQ punto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.lecturaError("Se esperaba palabra reservada program",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program Identificador puntoComa BLQ punto 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.apiExp.escribirArchivo((String)id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

